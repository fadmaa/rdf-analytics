========== query 1 (simple query)==========
/*
getting names of all speakers
*/

SELECT ?name
WHERE{
  ?p <http://example.org/p/name> ?name .
}ORDER BY ?name

========== query 2 (aggregate query)==========
/*
number of speakers per genders
*/

SELECT ?gender (COUNT(*) AS ?count)
WHERE{
  ?p <http://example.org/p/gender> ?gender
} GROUP BY ?gender

========== query 3 (aggregate query/ graph measure query)==========
/*
computes the number each person knows
from graph theory perspective: this computes vertices out degree
*/

SELECT ?name (COUNT(?n) AS ?neighbours)
WHERE{
  ?p <http://example.org/p/knows> ?n .
  ?p <http://example.org/p/name> ?name .
} GROUP BY ?p ?name
ORDER BY desc(?neighbours)

========== query 4 (graph measure query)==========
/*
computes the degree of each node
*/

SELECT ?name (COUNT(?n) AS ?degree)
WHERE{
  {?p <http://example.org/p/knows> ?n .} UNION {?n <http://example.org/p/knows> ?p }
  ?p <http://example.org/p/name> ?name .
} GROUP BY ?p ?name
ORDER BY desc(?neighbours)

========== query 5 (graph measure query)==========
/*
computes the average degree of the graph
*/

SELECT (SUM(?degree)/ COUNT(?p) AS ?avgDegree)
WHERE{
SELECT ?p (COUNT(?n) AS ?degree)
WHERE{
  {?p <http://example.org/p/knows> ?n .} UNION {?n <http://example.org/p/knows> ?p }

} GROUP BY ?p
}

========== query 6 (graph measure query)==========
/*
computes the average degree of the graph using Handshaking Lemma http://en.wikipedia.org/wiki/Handshaking_lemma
sum of nodes degrees = 2 * number of edges
*/

SELECT ( 2 * COUNT(?k) / COUNT(DISTINCT ?p) AS ?avgDegree)
WHERE{
  ?p ?k ?n .
  FILTER (?k=<http://example.org/p/knows>)
} 

========== query 6 (graph measure query)==========
/*
find the shortest path between each pair of nodes up to the length of 5
It is not possible to generalize this to any graph/any length (i.e. you need to name the property see: http://answers.semanticweb.com/questions/1817/finding-the-shortest-route-between-two-concepts-using-sparql
/*

PREFIX :<http://example.org/p/>
SELECT ?v1 ?v2 (MIN(?l) AS ?shortestPath)
WHERE{
  {
  ?v1 :knows ?v2
 BIND (1 AS ?l)
 } UNION 
 {
?v1 :knows{2} ?v2
 BIND (2 AS ?l)
 } UNION 
{
?v1 :knows{3} ?v2
 BIND (3 AS ?l)
 } UNION
 {
?v1 :knows{4} ?v2
 BIND (4 AS ?l)
 } UNION
 {
?v1 :knows{5} ?v2
 BIND (5 AS ?l)
 }  
FILTER (?v1 != ?v2)
} GROUP BY ?v1 ?v2
ORDER BY ?v1 ?v2

========== query 7 (graph summary query)==========
/*
this computes the "schema" of an RDF dataset. This is based on the queries generated by Sindice Sparqled: https://github.com/sindice/sparqled/tree/master/sparql-summary/src/main/java/org/sindice/summary

See also http://sheeeer.wordpress.com/2011/05/05/a-shot-at-rdf-schema-discovery/ for related topic and a way to visualise the results
/*

SELECT  ?label  (COUNT (?label) AS ?cardinality) ?source ?target
WHERE {
    {
      SELECT ?s (GROUP_CONCAT(concat('<',str(?type),'>')) AS ?source)
      WHERE {
          {
            SELECT ?s ?type 
            WHERE {
                { ?s a ?type . }
            } ORDER BY ?type
          }
      } GROUP BY ?s
    }
    ?s ?label ?sSon .
    OPTIONAL {
        {
          SELECT ?sSon (GROUP_CONCAT(concat('<',str(?typeSon),'>')) AS ?target)
          WHERE {
              {
                SELECT ?sSon ?typeSon 
                WHERE {
                    { ?sSon a ?typeSon . }
                } ORDER BY ?typeSon
              }
          } GROUP BY ?sSon
        }
    }
} GROUP BY ?label ?source ?target 
